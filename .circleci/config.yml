# version: 2.1
# executors:
#   default:
#     working_directory: ~/circleci-books-app
#     docker:
#       - image: circleci/ruby:2.6.3-node-browsers
#         environment:
#           BUNDLE_PATH: vendor/bundle
#           PGUSER: circleci-books_app
#       - image: circleci/postgres:11-alpine
#         environment:
#           POSTGRES_USER: circleci-books-app
#           POSTGRES_DB: books-app

# commands:
#   set_up:
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - gem-cache-v1-{{ checksum "Gemfile.lock" }}
#             - gem-cache-v1

#       - run:
#           name: Install Bundle
#           command: gem install bundle

#       - run:
#           name: Bundle Install
#           command: bundle install

#       - save_cache:
#           key: gem-chace-v1-{{ checksum "Gemfile.lock" }}
#           paths:
#             - vendor/bundle

#       - restore_cache:
#           keys:
#             - yarn-chace-v1-{{ checksum "yarn.lock" }}
#             - yarn-chace-v1-

#       - run:
#           name: Yarn Install
#           command: yarn install

#       - save_cache:
#           key: yarn-chace-v1-{{ checksum "yarn.lock" }}
#           paths:
#             - ~/.cache/yarn

# jobs:
#   minitest:
#     executor: default
#     environment:
#       RAILS_ENV = test
#     steps:
#       - checkout
#       - set_up
#       - run:
#           name: Database setup
#           command: bin/rails db:schema:load

#       - run:
#           name: Run test
#           command: bin/rails test

#   deploy:
#     executor: default
#     steps:
#       - checkout
#       - set_up
#       - add_ssh_keys:
#           fingerprints:
#             - "4d:e8:26:23:96:bf:6c:6e:15:b8:a8:25:0c:21:8e:f5"
#       - run:
#           name: deploy
#           command: bundle exec cap production deploy

# workflows:
#   minitest-deploy:
#     jobs:
#       - minitest:
#           filters:
#             branches:
#               only: master
#       - deploy:
#           requires:
#             - minitest
#           filters:
#             branches:
#               only: master




version: 2.1
jobs: # ステップの集合
  build: # Workflows を使用しない実行では、エントリポイントとして `build` ジョブが必要
    # parallelism: 3 # このジョブのインスタンスを 3つ並列実行します
    docker: # Docker でステップを実行します
      - image: circleci/ruby:2.6.5-node-browsers # このイメージをすべての `steps` が実行されるプライマリコンテナとして使用します
        environment: # プライマリコンテナの環境変数
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: circleci-demo-ruby
          RAILS_ENV: test
      - image: circleci/postgres:11.5-alpine # データベースイメージ
        environment: # データベースの環境変数
          POSTGRES_USER: circleci-demo-ruby
          POSTGRES_DB: rails_blog
          POSTGRES_PASSWORD: ""
    steps: # 実行可能コマンドの集合
      - checkout # ソースコードを作業ディレクトリにチェックアウトする特別なステップ

      - run:
          name: Update bundler
          command: gem update bundler

      - run:
          name: Which bundler? # バージョン確認
          command: bundle -v

      # バンドルキャッシュを復元します
      # 依存関係キャッシュについては https://circleci.com/docs/ja/2.0/caching/ をお読みください

      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run: # Ruby の依存関係をインストールします
          name: バンドルインストール
          command: bundle check --path vendor/bundle || bundle install --deployment

      # Ruby の依存関係のバンドルキャッシュを保存します

      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # アプリケーションで Webpacker または Yarn を他の何らかの方法で使用する場合にのみ必要です

      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-

      - run:
          name: Yarn をインストール
          command: yarn install --cache-folder ~/.cache/yarn

      # Yarn または Webpacker のキャッシュを保存します

      - save_cache:
          key: rails-demo-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: DB を待機
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: データベースをセットアップ
          command: bin/rails db:schema:load --trace

      - run:
          name: Rails test
          command: |
            bin/rails test
            bin/rails test:system

      # タイミング解析のテスト結果を保存します

      - store_test_results: # テストサマリー (https://circleci.com/docs/ja/2.0/collect-test-data/) に表示するテスト結果をアップロードします
          path: test_results

# workflows:  
#   build_and_test:  
#     jobs:  
#       - test  
